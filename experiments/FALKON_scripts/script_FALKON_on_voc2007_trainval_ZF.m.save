function script_FALKON_on_voc2007_trainval_ZF(bkg_numbs, sigmas, lambdas, gpu_id)

gpuDevice(gpu_id);

FALKON_voc_trainval_init_variables;

% region proposals generation
dataset.roidb_train  = cellfun(@(x, y) Faster_RCNN_Train.do_proposal_test(conf_proposal,model.stage2_rpn, output_dir, x, y), ...
                                                                          dataset.imdb_train, dataset.roidb_train, 'UniformOutput', false);
% features extraction
cellfun(@(x, y) Incremental_Faster_RCNN_Train.do_extract_features(conf_fast_rcnn, model.feature_extraction, feature_layer, x, y), ...
                                                                          dataset.imdb_train, dataset.roidb_train); 

% region proposals generation
dataset.roidb_test = cellfun(@(x, y) Faster_RCNN_Train.do_proposal_test(conf_proposal, model.stage2_rpn , output_dir, x, y), ...
                                                                          dataset.imdb_test, dataset.roidb_test, 'UniformOutput', false);
% features extraction
cellfun(@(x, y) Incremental_Faster_RCNN_Train.do_extract_features(conf_fast_rcnn, model.feature_extraction, feature_layer, x, y), ...
                                                                          dataset.imdb_test, dataset.roidb_test);

                                                                                                                                          
% bbox regressors train
% model.bbox_regressors = load('bbox_reg/bbox_regressor_final.mat');
model.bbox_regressors = cellfun(@(x, y) Incremental_Faster_RCNN_Train.do_bbox_regressor_train(conf_fast_rcnn, model.feature_extraction, x, y), ... 
                                                                          dataset.imdb_train, dataset.roidb_train);

% alphas = 0.1:0.1:1;
% bkg_numbs = 1000:2000:11000;
% sigmas = [10 12 14 16 18 20 22 24 26 28 30 40 50 60 70 80 90 100];
% lambdas = [0.1 0.02 0.01 0.009 0.001 0.0001 0.00001 0.000001];

if(train_classifier_options.cross_validation.required)
    train_classifier_options.cross_validation.sigmas = sigmas;
    train_classifier_options.cross_validation.lambdas = lambdas;
use_flipped                 = false;
  % removed_classes          = {'cat','chair','cow','diningtable','dog','horse','motorbike','person','pottedplant','sheep','sofa','train','tvmonitor'};
    removed_classes = {};
    imdb_cache_name = 'cache_voc2007_train'; 
    mkdir(['imdb/' imdb_cache_name]);
    dataset                     = Dataset.voc2007_train(dataset, 'train', use_flipped, removed_classes, imdb_cache_name);
    % region proposals generation

    dataset.roidb_val = cellfun(@(x, y) Faster_RCNN_Train.do_proposal_test(conf_proposal, model.stage2_rpn , output_dir, x, y), ...
                                                                              dataset.imdb_val, dataset.roidb_val, 'UniformOutput', false);
    % features extraction
    cellfun(@(x, y) Incremental_Faster_RCNN_Train.do_extract_features(conf_fast_rcnn, model.feature_extraction, feature_layer, x, y), ...
                                                                          dataset.imdb_val, dataset.roidb_val);
end

best_models = {};

for j=1:length(bkg_numbs)
    
    file_name = [results_dir '/test_bkg' int2str(bkg_numbs(j)) '.txt'];
    bkg_fid = fopen(file_name, 'wt');
    fprintf( bkg_fid, 'Results for bkg_num = %f \n', bkg_numbs(j));
    
    best_models{j}.results_matrix_cls = zeros(length(sigmas),length(lambdas));
    best_models{j}.results_matrix_reg = zeros(length(sigmas),length(lambdas));
    best_models{j}.reg_mAP_val = 0.0;
    for k=1:length(sigmas)
        file_name = [results_dir '/precisions_' int2str(bkg_numbs(j)) '_sigma_' int2str(sigmas(k)) '.txt'];
        fid = fopen(file_name, 'wt');
        train_classifier_options.sigma = sigmas(k);
        fprintf( fid, 'Results for sigma = %f \n', train_classifier_options.sigma);
        for l=1:length(lambdas)
            train_classifier_options.lambda = lambdas(l);
            fprintf( fid, 'lambda = %f \n', train_classifier_options.lambda);
                       
            negatives_selection.N = bkg_numbs(j);

            % train classifiers
            rebal_alpha = 0;
            model.classifiers.falkon = cellfun(@(x) Incremental_Faster_RCNN_Train.do_classifier_train(conf_fast_rcnn, model.feature_extraction, cls_mode, ...
                                                                              train_classifier_options, x, rebalancing, rebal_alpha, negatives_selection, fid), ...
                                                                              dataset.imdb_train, 'UniformOutput', false);

            addpath('./datasets/VOCdevkit2007/VOCcode_incremental');
            rmdir(boxes_dir,'s');
            mkdir(boxes_dir);

            % test classifiers
            res_cls = cellfun(@(x) Incremental_Faster_RCNN_Train.do_classifiers_test(train_classifier_options.cache_dir, conf_fast_rcnn, '',  cls_mode, ...
                                                                              model.classifiers.falkon{1}, x, fid), dataset.imdb_val, 'UniformOutput', false);
            aps_cls = [res_cls{1}(:).ap]';
            best_models{j}.results_matrix_cls(k,l) = mean(aps_cls);

            % test regressors
            res_reg = cellfun(@(x) Incremental_Faster_RCNN_Train.do_regressor_test(conf_fast_rcnn, model.bbox_regressors, model.feature_extraction, x, fid), ...
                                                                              dataset.imdb_val, 'UniformOutput', false);
            aps_reg = [res_reg{1}(:).ap]';
            best_models{j}.results_matrix_reg(k,l) = mean(aps_reg);

            if(best_models{j}.reg_mAP_val <= mean(aps_reg))
                best_models{j}.detectors = model.classifiers.falkon;
                best_models{j}.cls_mAP_val = mean(aps_cls);
                best_models{j}.reg_mAP_val = mean(aps_reg);
                best_models{j}.lambda = lambdas(l);
                best_models{j}.sigma = sigmas(k);

            end
        end
    fclose(fid);
    end
    
    fprintf(bkg_fid, 'Best model for %f background regions is: \n', bkg_numbs(j));
    fprintf(bkg_fid, 'sigma = %f  \n', best_models{j}.sigma);
    fprintf(bkg_fid, 'lambda = %f  \n', best_models{j}.lambda);
    fprintf(bkg_fid, 'and has mAP after classification on validation set = %f  \n', best_models{j}.cls_mAP_val);
    fprintf(bkg_fid, 'and has mAP after regression on validation set = %f  \n', best_models{j}.reg_mAP_val);
    
    % TEST
    rmdir(boxes_dir,'s');
    mkdir(boxes_dir);

    % test classifiers
    res_cls = cellfun(@(x) Incremental_Faster_RCNN_Train.do_classifiers_test(train_classifier_options.cache_dir, conf_fast_rcnn, '',  cls_mode, ...
                                                                      best_models{j}.detectors{1}, x, bkg_fid), dataset.imdb_test, 'UniformOutput', false);
    final_aps_cls = [res_cls{1}(:).ap]';
    best_models{j}.cls_mAP_final_test = mean(final_aps_cls);

    % test regressors
    res_reg = cellfun(@(x) Incremental_Faster_RCNN_Train.do_regressor_test(conf_fast_rcnn, model.bbox_regressors.bbox_reg, model.feature_extraction, x, bkg_fid), ...
                                                                      dataset.imdb_test, 'UniformOutput', false);
    final_aps_reg = [res_reg{1}(:).ap]';
    best_models{j}.reg_mAP_final_test = mean(final_aps_reg);

    
    model = best_models{j};
    printf('saving results...');
    save([results_dir '/best_model_' int2str(bkg_numbs(j))  'bkg.mat'], 'model');
end
    
    
end
