function [ bbox_reg ] = do_bbox_regressor_train(conf, cnn_model, imdb_train, roidb_train, varargin )

ip = inputParser;
ip.addParamValue('bbox_model_suffix', '_default',   @isstr);
ip.addParamValue('min_overlap', 0.6,   @isscalar);
ip.addParamValue('lambda', 1000,   @isscalar);
ip.addParamValue('robust', 0,   @isscalar);
ip.addParamValue('reg_mode', 'no_norm',   @isstr);
ip.parse(varargin{:});

% train the bbox regression model
switch ip.Results.reg_mode
    case {'no_norm'}
        bbox_reg = cnn_train_bbox_regressor(conf, imdb_train, roidb_train, cnn_model, ip.Results.bbox_model_suffix,...
            'min_overlap', ip.Results.min_overlap, ...
            'layer', 5, ...
            'lambda', ip.Results.lambda, ...
            'robust', ip.Results.robust, ...
            'binarize', false);
    case {'norm'}
        bbox_reg = cnn_train_bbox_regressor_norm(conf, imdb_train, roidb_train, cnn_model, ip.Results.bbox_model_suffix,...
            'min_overlap', ip.Results.min_overlap, ...
            'layer', 5, ...
            'lambda', ip.Results.lambda, ...
            'robust', ip.Results.robust, ...
            'binarize', false);
        
    otherwise
        error('regressor mode unknown');

end

